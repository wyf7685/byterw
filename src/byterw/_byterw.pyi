from collections.abc import Buffer
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional, Self, Set, TypeAlias, TypeVar, Union

from pydantic import BaseModel

_T = TypeVar("_T")
ValidType: TypeAlias = Union[
    None,
    int,
    float,
    bool,
    str,
    bytes,
    str,
    Dict[Any, Any],
    List[Any],
    Set[Any],
    datetime,
    Path,
    BaseModel,
]

class ByteReader:
    def __init__(self, buffer: Buffer, key: str | int | None = None) -> None: ...
    def any(self) -> bool: ...
    def read_int(self) -> int: ...
    def read_float(self) -> float: ...
    def read_bool(self) -> bool: ...
    def read_string(self) -> str: ...
    def read_bytes(self) -> bytes: ...
    def read_dict(self) -> Dict[Any, Any]: ...
    def read_list(self) -> List[Any]: ...
    def read_set(self) -> Set[Any]: ...
    def read_datetime(self) -> datetime: ...
    def read_path(self) -> Path: ...
    def read_model(self, __T: Optional[type[_T]] = None) -> _T: ...
    def read(self) -> ValidType: ...

class ByteWriter:
    def __init__(self, key: str | int | None = None): ...
    def get(self) -> bytes: ...
    def write_int(self, value: int) -> Self: ...
    def write_float(self, value: float, precision: int = 10) -> Self: ...
    def write_bool(self, value: bool) -> Self: ...
    def write_string(self, value: str) -> Self: ...
    def write_bytes(self, value: bytes) -> Self: ...
    def write_dict(self, value: Dict[Any, Any]) -> Self: ...
    def write_list(self, value: List[Any]) -> Self: ...
    def write_set(self, value: Set[Any]) -> Self: ...
    def write_datetime(self, value: datetime) -> Self: ...
    def write_path(self, value: Path) -> Self: ...
    def write_model(self, value: BaseModel) -> Self: ...
    def write(self, value: ValidType) -> Self: ...
